#pragma once

#include <type_traits>
#include "./BST.thd"
#include "../Stack.thd"

namespace line {

namespace dataStructures {

namespace BST {
    
template<bool Const, typename Node, typename Data>
class BSTIterator {
public:
    using NodeType = typename std::conditional<Const, const Node, Node>::type;

    using DataType = typename std::conditional<Const, const Data, Data>::type;

public:
    BSTIterator() noexcept = default;

    BSTIterator(NodeType* root, std::size_t height);

    BSTIterator(const BSTIterator& other) = default;

    BSTIterator(BSTIterator&& other) noexcept = default;

    ~BSTIterator() noexcept = default;

    BSTIterator& operator=(const BSTIterator& other) = default;

    BSTIterator& operator=(BSTIterator&& other) noexcept = default;

public:
    operator bool() const noexcept;

    const Data& operator*() const noexcept;

public:
    DataType& operator*() noexcept;

    BSTIterator& operator++();

private:
    void moveLeft(NodeType* node);

private:
    line::dataStructures::Stack<NodeType*> stack;
};

}

}

}

template<bool Const, typename Node, typename Data>
line::dataStructures::BST::BSTIterator<Const, Node, Data>::BSTIterator(NodeType* root, std::size_t height)
: stack{height} {
    moveLeft(root);
}

template<bool Const, typename Node, typename Data>
line::dataStructures::BST::BSTIterator<Const, Node, Data>::operator bool() const noexcept {
    return !stack.isEmpty();
}

template<bool Const, typename Node, typename Data>
const Data&
line::dataStructures::BST::BSTIterator<Const, Node, Data>::operator*() const noexcept {
    return stack.top()->data;
}

template<bool Const, typename Node, typename Data>
typename line::dataStructures::BST::BSTIterator<Const, Node, Data>::DataType&
line::dataStructures::BST::BSTIterator<Const, Node, Data>::operator*() noexcept {
    return stack.top()->data;
}

template<bool Const, typename Node, typename Data>
line::dataStructures::BST::BSTIterator<Const ,Node, Data>&
line::dataStructures::BST::BSTIterator<Const, Node, Data>::operator++() {
    if(!stack.isEmpty()) {
        NodeType* top = stack.top();
        stack.pop();
        moveLeft(top->rightNode());
    }
    return *this;
}

template<bool Const, typename Node, typename Data>
void
line::dataStructures::BST::BSTIterator<Const, Node, Data>::moveLeft(NodeType* node) {
    while(node) {
        stack.push(node);
        node = node->leftNode();
    }
}