#pragma once

#include <cstddef>
#include "../../utils/types/Compare.thd"
#include "../../utils/types/Ref.thd"

namespace line {

namespace dataStructures {

namespace BST {

template<typename T>
struct Node {
    Node* left;
    Node* right;
    T data;

public:
    Node(const T& data, Node* left = nullptr, Node* right = nullptr);

    Node(T&& data, Node* left = nullptr, Node* right = nullptr) noexcept;

    Node(const Node& other) = delete;

    Node(Node&& other) = delete;

    ~Node() noexcept = default;
    
    Node& operator=(const Node& other) = delete;

    Node& operator=(Node&& other) = delete;

public:
    const Node* leftNode() const noexcept;

    const Node* rightNode() const noexcept;

public:
    Node*& leftNode() noexcept;

    Node*& rightNode() noexcept;
};

template<typename Node>
bool isEmpty(const Node* root) noexcept;

template<typename Node>
std::size_t height(const Node* root) noexcept;

template<typename Node, typename T, Node* (*routine) (Node*, const T&), line::utils::types::Compare<T> compare>
Node* insert(Node* root, const T& data);

template<typename Node, typename T, Node* (*routine) (Node*, const T&), line::utils::types::Compare<T> compare>
Node* insert(Node* root, T&& data);

template<typename Node, typename T, typename Key, line::utils::types::KeyCompare<T, Key> compare>
Node* find(Node* root, const Key& key) noexcept;

template<typename Node, typename T, typename Key, Node* (*routine) (Node*), line::utils::types::KeyCompare<T, Key> compare>
Node* remove(Node* root, const Key& key) noexcept;

template<typename Node>
void destroy(Node* root) noexcept;

namespace internal {

template<typename Node, typename T, typename Data, Node* (*routine) (Node*, const T&), line::utils::types::Compare<T> compare>
Node* insert(Node* root, Data data, line::utils::types::Ref<const Node*> inserted);

template<typename Node>
Node* extractMinNode(Node* parent, Node* current) noexcept;

}

}

}

}


// IMPLEMENTATION


#include <cassert>
#include <algorithm>
#include <utility>
#include "../../utils/types/ComparsionResult.h"

template<typename T>
line::dataStructures::BST::Node<T>::Node(const T& data, Node* left, Node* right)
: left{left}, right{right}, data{data} { }

template<typename T>
line::dataStructures::BST::Node<T>::Node(T&& data, Node* left, Node* right) noexcept
: left{left}, right{right}, data{std::move(data)} { }

template<typename T>
const typename line::dataStructures::BST::Node<T>*
line::dataStructures::BST::Node<T>::leftNode() const noexcept {
    return left;
}

template<typename T>
const typename line::dataStructures::BST::Node<T>*
line::dataStructures::BST::Node<T>::rightNode() const noexcept {
    return right;
}

template<typename T>
typename line::dataStructures::BST::Node<T>*&
line::dataStructures::BST::Node<T>::leftNode() noexcept {
    return left;
}

template<typename T>
typename line::dataStructures::BST::Node<T>*&
line::dataStructures::BST::Node<T>::rightNode() noexcept {
    return right;
}

template<typename Node>
bool
line::dataStructures::BST::isEmpty(const Node* root) noexcept {
    return !root;
}

template<typename Node>
std::size_t
line::dataStructures::BST::height(const Node* root) noexcept {
    return root ? std::max(height(root->leftNode()), height(root->rightNode())) + 1 : 0;
}

template<typename Node, typename T, typename Data, Node* (*routine) (Node*, const T&), line::utils::types::Compare<T> compare>
Node*
line::dataStructures::BST::internal::insert(Node* root, Data data, line::utils::types::Ref<const Node*> inserted) {
    using line::utils::types::ComparsionResult;
    if(isEmpty(root)) {
        Node* node = new Node(std::forward<Data>(data));
        inserted = node;
        return node;
    }
    switch(compare(root->data, data)) {
        case ComparsionResult::Equal: return root;
        case ComparsionResult::Less:
            root->rightNode() = internal::insert<Node, T, Data, routine, compare>(root->rightNode(), std::forward<Data>(data), inserted);
            break;
        case ComparsionResult::Greater:
            root->leftNode() = internal::insert<Node, T, Data, routine, compare>(root->leftNode(), std::forward<Data>(data), inserted);
            break;
        default: assert(false);
    }
    return routine(root, inserted->data);
}

template<typename Node, typename T, Node* (*routine) (Node*, const T&), line::utils::types::Compare<T> compare>
Node*
line::dataStructures::BST::insert(Node* root, const T& data) {
    const Node* inserted = nullptr;
    return internal::insert<Node, T, const T&, routine, compare>(root, data, inserted);
}

template<typename Node, typename T, Node* (*routine) (Node*, const T&), line::utils::types::Compare<T> compare>
Node*
line::dataStructures::BST::insert(Node* root, T&& data) {
    const Node* inserted = nullptr;
    return internal::insert<Node, T, T&&, routine, compare>(root, std::move(data), inserted);
}

template<typename Node, typename T, typename Key, line::utils::types::KeyCompare<T, Key> compare>
Node*
line::dataStructures::BST::find(Node* root, const Key& key) noexcept {
    if(isEmpty(root)) {
        return nullptr;
    }
    using line::utils::types::ComparsionResult;
    ComparsionResult comparsionResult = compare(root->data, key);
    if(comparsionResult == ComparsionResult::Equal) {
        return root;
    }
    return find<Node, T, Key, compare>(comparsionResult == ComparsionResult::Less ? root->rightNode() : root->leftNode(), key);
}

template<typename Node>
Node* line::dataStructures::BST::internal::extractMinNode(Node* parent, Node* current) noexcept {
    return !isEmpty(current->leftNode())
        ? extractMinNode(current, current->leftNode())
        : (parent->leftNode() = current->rightNode(), current);
}

template<typename Node, typename T, typename Key, Node* (*routine) (Node*), line::utils::types::KeyCompare<T, Key> compare>
Node*
line::dataStructures::BST::remove(Node* root, const Key& key) noexcept {
    if(isEmpty(root)) {
        return nullptr;
    }
    using line::utils::types::ComparsionResult;
    const bool isLeftEmpty = isEmpty(root->leftNode());
    const bool isRightEmpty = isEmpty(root->rightNode());
    switch(compare(root->data, key)) {
        case ComparsionResult::Less:
            root->rightNode() = remove<Node, T, Key, routine, compare>(root->rightNode(), key);
            break;
        case ComparsionResult::Greater:
            root->leftNode() = remove<Node, T, Key, routine, compare>(root->leftNode(), key);
            break;
        case ComparsionResult::Equal:
            if(isLeftEmpty && isRightEmpty) {
                delete root;
                return nullptr;
            }
            if(isLeftEmpty ^ isRightEmpty) {
                Node* temp = isLeftEmpty ? root->rightNode() : root->leftNode();
                delete root;
                root = temp;
                break;
            }
            if(isEmpty(root->rightNode()->leftNode())) {
                Node* temp = root->rightNode();
                temp->leftNode() = root->leftNode();
                delete root;
                root = temp;
            } else {
                Node* inorderSucc = internal::extractMinNode(root->rightNode(), root->rightNode()->leftNode());
                inorderSucc->rightNode() = root->rightNode();
                inorderSucc->leftNode() = root->leftNode();
                delete root;
                root = inorderSucc;
            }
            break;
        default: assert(false);
    }
    return routine(root);
}

template<typename Node>
void
line::dataStructures::BST::destroy(Node* root) noexcept {
    if(!isEmpty(root)) {
        destroy(root->leftNode());
        destroy(root->rightNode());
        delete root;
    }
}